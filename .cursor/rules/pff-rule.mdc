---
alwaysApply: false
---

## 0. 개요

### 0.1 목적

본 문서는 기존에 개발된 Piku 실시간 투표 웹 애플리케이션을 확장하기 위한 기능 명세서입니다.
본 프로젝트는 지인 간 놀이 공간을 웹으로 제공하며, 유저 인증, 방 생성 및 접속, 실시간 투표, 결과 시각화 기능을 포함합니다.
이번 확장에서는 방 시스템, 유저 프로필 관리, 권한 관리, 투표 시스템 고도화를 목표로 합니다.

## 1. 기술 스택

| 항목          | 기술                                                        |
| ------------- | ----------------------------------------------------------- |
| 프론트엔드    | React + Vite + TypeScript                                   |
| 상태관리      | Recoil                                                      |
| 스타일링      | SCSS (CSS Module 기반)                                      |
| 인증 / 데이터 | Firebase Auth, Firebase Realtime Database, Firebase Storage |
| 배포          | Vercel                                                      |

## 2. 확장 기능 요구사항

### 2.1 회원가입 및 프로필

| ID      | 기능                          | 설명                                     |
| ------- | ----------------------------- | ---------------------------------------- |
| AUTH-01 | Firebase Auth 로그인/회원가입 | Google 또는 이메일/비밀번호 방식 지원    |
| AUTH-02 | 최초 로그인 시 닉네임 등록    | 닉네임은 중복 불가, 필수 입력            |
| AUTH-03 | 프로필 이미지 업로드          | Firebase Storage 사용, 다운로드 URL 저장 |
| AUTH-04 | 유저 정보 전역 사용           | 닉네임/이미지/UID는 전역 상태로 공유됨   |

### 2.2 방 시스템

| ID      | 기능                         | 설명                             |
| ------- | ---------------------------- | -------------------------------- |
| ROOM-01 | Admin이 방 생성              | 제목, 설명, 비밀번호 입력        |
| ROOM-02 | 방은 고유 ID 기반 URL로 접근 | ex: /room/abc123                 |
| ROOM-03 | 유저는 방 목록에서 입장      | 비밀번호 확인 후 입장 가능       |
| ROOM-04 | 유저 권한 구분               | Admin(생성자) vs Participant     |
| ROOM-05 | 유저 입장/퇴장 실시간 반영   | Firebase의 onDisconnect 사용     |
| ROOM-06 | 방 자동 만료 (선택적)        | 일정 시간 미활성 시 방 제거 가능 |

### 2.3 투표 기능

| ID      | 기능                                    | 설명                                   |
| ------- | --------------------------------------- | -------------------------------------- |
| VOTE-01 | Admin이 보기 항목 설정                  | 2개 이상 보기 항목 등록 가능           |
| VOTE-02 | 유저는 보기 중 하나를 선택하여 투표     | 1인 1표, 중복 투표 불가                |
| VOTE-03 | 투표 결과는 실시간 반영                 | Admin 화면 및 결과 화면에 표시         |
| VOTE-04 | 모든 인원이 투표 완료 시 자동 결과 출력 | 또는 Admin이 수동 종료 가능            |
| VOTE-05 | 결과 시각화                             | 막대 그래프 기반 (선택 비율/수치 포함) |

### 2.4 관리자 기능

| ID       | 기능                  | 설명                            |
| -------- | --------------------- | ------------------------------- |
| ADMIN-01 | 실시간 유저 목록 확인 | 닉네임 + 참여 상태 표시         |
| ADMIN-02 | 투표 상황 실시간 반영 | 각 유저의 응답 여부 표시        |
| ADMIN-03 | 투표 강제 종료        | 강제 결과 출력 가능             |
| ADMIN-04 | 방 초기화             | 유저/투표 정보 전체 초기화 가능 |

## 3. 라우팅 구조

| 경로                   | 설명                                 |
| ---------------------- | ------------------------------------ |
| `/login`               | 로그인                               |
| `/register`            | 최초 로그인 시 닉네임 및 이미지 등록 |
| `/lobby`               | 방 목록 확인 및 방 생성              |
| `/room/:roomId`        | 일반 유저 투표 화면                  |
| `/room/:roomId/admin`  | 관리자 대시보드                      |
| `/room/:roomId/result` | 투표 결과 시각화 화면                |

## 4. 상태관리 설계

| 영역        | 사용 기술 | 설명                                              |
| ----------- | --------- | ------------------------------------------------- |
| 유저 상태   | Recoil    | userState: 로그인된 유저의 닉네임, 이미지, UID 등 |
| 방 정보     | Recoil    | roomState: 현재 접속한 방의 메타데이터            |
| 참가자 목록 | Recoil    | participantsState: 현재 참여 중인 유저 목록       |
| 투표 정보   | Recoil    | voteState: 보기 목록, 선택된 항목, 결과 등        |

## 5. 스타일링 설계

| 항목        | 방식                                                   |
| ----------- | ------------------------------------------------------ |
| 프레임워크  | SCSS (CSS Module)                                      |
| 파일 구조   | 컴포넌트 단위 .module.scss 사용                        |
| 반응형 대응 | SCSS 미디어 쿼리로 직접 작성                           |
| 색상/타이포 | 기본 디자인 토큰은 전역 변수로 관리 (\_variables.scss) |
| 접근성      | 버튼/폼 요소 키보드 접근 및 focus 처리 필수            |

## 6. 테스트 및 배포

| 항목     | 내용                                           |
| -------- | ---------------------------------------------- |
| 테스트   | 수동 테스트 시나리오 문서화 (자동화는 선택)    |
| 배포     | Vercel을 통한 자동 배포 (main 브랜치 기준)     |
| 환경변수 | Firebase 관련 .env 분리, Vercel 환경 설정 포함 |

## 7. 개발 시 유의사항

- Firebase 구조 변경 시, 데이터 이전 없이 확장 가능한 방식으로 설계
- 인증 및 권한 관련 로직은 Firebase Rules에도 반영 필수
- 상태관리에서 Recoil selector는 반드시 cleanup 처리 포함
- 비밀번호 저장은 반드시 해시 처리 후 저장 (client hash preferred)
- 참가자 퇴장/재입장 처리 정확히 동작할 것 (onDisconnect, set 활용)
