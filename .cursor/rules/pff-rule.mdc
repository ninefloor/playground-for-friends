---
alwaysApply: false
---

## 0. 개요

### 0.1 목적

본 문서는 기존에 개발된 Piku 실시간 투표 웹 애플리케이션을 확장하기 위한 기능 명세서입니다.
본 프로젝트는 지인 간 놀이 공간을 웹으로 제공하며, 유저 인증, 방 생성 및 접속, 실시간 투표, 결과 시각화 기능을 포함합니다.
이번 확장에서는 방 시스템, 유저 프로필 관리, 권한 관리, 투표 시스템 고도화를 목표로 합니다.

## 1. 기술 스택

| 항목          | 기술                                                        |
| ------------- | ----------------------------------------------------------- |
| 프론트엔드    | React + Vite + TypeScript                                   |
| 상태관리      | Jotai (jotai/utils 포함)                                    |
| 스타일링      | SCSS (CSS Module 기반, 전역 토큰은 `src/theme.scss`)        |
| 인증 / 데이터 | Firebase Auth, Firebase Realtime Database, Firebase Storage |
| 배포          | Vercel                                                      |

## 2. 확장 기능 요구사항

### 2.1 회원가입 및 프로필

| ID      | 기능                          | 설명                                     |
| ------- | ----------------------------- | ---------------------------------------- |
| AUTH-01 | Firebase Auth 로그인/회원가입 | Google 또는 이메일/비밀번호 방식 지원    |
| AUTH-02 | 최초 로그인 시 닉네임 등록    | 필수 입력                                |
| AUTH-03 | 프로필 이미지 업로드          | Firebase Storage 사용, 다운로드 URL 저장 |
| AUTH-04 | 유저 정보 전역 사용           | 닉네임/이미지/UID는 전역 상태로 공유됨   |

### 2.2 방 시스템

| ID      | 기능                         | 설명                             |
| ------- | ---------------------------- | -------------------------------- |
| ROOM-01 | Admin이 방 생성              | 제목, 설명, 비밀번호 입력        |
| ROOM-02 | 방은 고유 ID 기반 URL로 접근 | ex: /room/abc123                 |
| ROOM-03 | 유저는 방 목록에서 입장      | 비밀번호 확인 후 입장 가능       |
| ROOM-04 | 유저 권한 구분               | Admin(생성자) vs Participant     |
| ROOM-05 | 유저 입장/퇴장 실시간 반영   | Firebase의 onDisconnect 사용     |
| ROOM-06 | 방 자동 만료 (선택적)        | 일정 시간 미활성 시 방 제거 가능 |

### 2.3 투표 기능

| ID      | 기능                                    | 설명                                   |
| ------- | --------------------------------------- | -------------------------------------- |
| VOTE-01 | Admin이 보기 항목 설정                  | 2개 이상 보기 항목 등록 가능           |
| VOTE-02 | 유저는 보기 중 하나를 선택하여 투표     | 1인 1표, 중복 투표 불가                |
| VOTE-03 | 투표 결과는 실시간 반영                 | Admin 화면 및 결과 화면에 표시         |
| VOTE-04 | 모든 인원이 투표 완료 시 자동 결과 출력 | 또는 Admin이 수동 종료 가능            |
| VOTE-05 | 결과 시각화                             | 막대 그래프 기반 (선택 비율/수치 포함) |

### 2.4 관리자 기능

| ID       | 기능                  | 설명                            |
| -------- | --------------------- | ------------------------------- |
| ADMIN-01 | 실시간 유저 목록 확인 | 닉네임 + 참여 상태 표시         |
| ADMIN-02 | 투표 상황 실시간 반영 | 각 유저의 응답 여부 표시        |
| ADMIN-03 | 투표 강제 종료        | 강제 결과 출력 가능             |
| ADMIN-04 | 방 초기화             | 유저/투표 정보 전체 초기화 가능 |

관리자 판별은 Firestore `users/{uid}.role === "ADMIN"` 기준을 사용합니다.

## 3. 라우팅 구조

현재 구현 기준(React Router, `src/components/Router.tsx`):

| 경로             | 설명                         |
| ---------------- | ---------------------------- |
| `/`              | 홈(로그인/진입)              |
| `/register`      | 회원가입(닉네임/이미지 등록) |
| `/profile`       | 프로필 수정(인증 필요)       |
| `/vote`          | 유저 투표 화면(인증 필요)    |
| `/tier`          | 티어 결정 화면(인증 필요)    |
| `/admin`         | 관리자 홈(ADMIN 전용)        |
| `/admin/vote`    | 관리자 투표 보드(ADMIN 전용) |
| `/admin/tier`    | 관리자 티어(ADMIN 전용)      |
| `/admin/members` | 멤버 관리(ADMIN 전용)        |

향후 확장안(방 시스템 도입 시): `/lobby`, `/room/:roomId`, `/room/:roomId/admin`, `/room/:roomId/result`

## 4. 상태관리 설계

현재 구현 기준(Jotai):

| 영역          | 기술  | 설명                                                                   |
| ------------- | ----- | ---------------------------------------------------------------------- |
| 유저 상태     | Jotai | `userInfoAtom`(세션 스토리지): uid, nickname, photoURL, role, color 등 |
| 인증 준비     | Jotai | `authReadyAtom`: 인증 초기화 완료 여부                                 |
| 실시간 데이터 | Hook  | `useRealtimeDB`/`useUserDecision`: RTDB 경로별 구독/쓰기               |

확장 시 도입할 atom은 `src/utils`에 파일 단위로 분리하고, 초기값/스토리지/키 충돌 정책을 문서화합니다.

## 5. 스타일링 설계

| 항목        | 방식                                                      |
| ----------- | --------------------------------------------------------- |
| 프레임워크  | SCSS (CSS Module)                                         |
| 파일 구조   | 컴포넌트 단위 `.module.scss` 사용                         |
| 전역 토큰   | `src/theme.scss`를 `@theme` 별칭으로 자동 주입(Vite 설정) |
| 반응형 대응 | SCSS 미디어 쿼리                                          |
| 접근성      | 버튼/폼 요소 키보드 접근 및 focus 처리 필수               |

## 6. 테스트 및 배포

| 항목     | 내용                                             |
| -------- | ------------------------------------------------ |
| 테스트   | 수동 테스트 시나리오 문서화 (자동화는 선택)      |
| 배포     | Vercel 자동 배포(main 브랜치 기준)               |
| 환경변수 | Firebase 관련 `.env.local` 분리, Vercel에 동기화 |

## 7. 개발 시 유의사항

- Firebase 구조 변경 시, 데이터 이전 없이 확장 가능한 방식으로 설계
- 인증 및 권한 관련 로직은 Firebase Rules에도 반영 필수
- Jotai atom 설계 시 스토리지/초기값/키 충돌 정책 명시, 불필요한 전역 상태 지양
- 비밀번호는 Firebase Auth로만 관리하며 별도 저장 금지
- 참가자 퇴장/재입장 처리 정확히 동작할 것 (onDisconnect, set 활용)
